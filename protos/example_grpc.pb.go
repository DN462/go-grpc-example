// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.1
// source: example.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataProcess_SendData_FullMethodName = "/proto.DataProcess/SendData"
)

// DataProcessClient is the client API for DataProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProcessClient interface {
	SendData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
}

type dataProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProcessClient(cc grpc.ClientConnInterface) DataProcessClient {
	return &dataProcessClient{cc}
}

func (c *dataProcessClient) SendData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, DataProcess_SendData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProcessServer is the server API for DataProcess service.
// All implementations must embed UnimplementedDataProcessServer
// for forward compatibility
type DataProcessServer interface {
	SendData(context.Context, *DataRequest) (*DataResponse, error)
	mustEmbedUnimplementedDataProcessServer()
}

// UnimplementedDataProcessServer must be embedded to have forward compatible implementations.
type UnimplementedDataProcessServer struct {
}

func (UnimplementedDataProcessServer) SendData(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedDataProcessServer) mustEmbedUnimplementedDataProcessServer() {}

// UnsafeDataProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProcessServer will
// result in compilation errors.
type UnsafeDataProcessServer interface {
	mustEmbedUnimplementedDataProcessServer()
}

func RegisterDataProcessServer(s grpc.ServiceRegistrar, srv DataProcessServer) {
	s.RegisterService(&DataProcess_ServiceDesc, srv)
}

func _DataProcess_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcess_SendData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessServer).SendData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProcess_ServiceDesc is the grpc.ServiceDesc for DataProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DataProcess",
	HandlerType: (*DataProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendData",
			Handler:    _DataProcess_SendData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
